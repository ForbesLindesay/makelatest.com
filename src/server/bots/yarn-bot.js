import {readFile, writeFile} from 'then-fs';
import spawn from 'cross-spawn';
import Promise from 'promise';
import {createCommit, pushCommit, createBranch, readGitFile, exactlyOneAhead} from './helpers';
import createMergeRequest from './create-merge-request';
import db from '../db';

function delay(time) {
  return new Promise((resolve, reject) => { setTimeout(delay, time); });
}
function execute(...args) {
  const child = spawn(...args);
  return new Promise((resolve, reject) => {
    let _stdout = [], _stderr = [];
    child.stdout.on('data', data => _stdout.push(data));
    child.stderr.on('data', data => _stderr.push(data));
    child.on('close', code => {
      const stdout = Buffer.concat(_stdout);
      const stderr = Buffer.concat(_stderr);
      if (code === 0) {
        resolve(stdout.toString('utf8'));
      } else {
        reject(new Error(stderr.toString('utf8')));
      }
    });
  });
}
function equalIsh(a, b) {
  return (
    a.toLowerCase().replace(/\s/g, '') ===
    b.toLowerCase().replace(/\s/g, '')
  )
}

const YARN_LOCK_FILE_NAME = 'yarn.lock';

export default async function run(repository, user, settings, {userClient, makeLatestClient, workingDirectory}) {
  const {fullName, defaultBranch} = repository;
  const {accessToken, username} = user;
  const {enabled, onlyIfYarnLockPresent, createPullRequests, autoMerge} = settings;

  if (!enabled) {
    return;
  }

  const [owner, repo] = fullName.split('/');
  const pkgJson = await readGitFile(userClient, {owner, repo, branch: defaultBranch, path: 'package.json'});
  const hasYarn = !!(await readGitFile(userClient, {owner, repo, branch: defaultBranch, path: 'yarn.lock'}));
  if (!pkgJson) {
    return;
  }
  if (!hasYarn && onlyIfYarnLockPresent) {
    return;
  }
  // TODO: how should we generate this robustly?
  await writeFile(workingDirectory + '/.yarnrc', `# THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
# yarn lockfile v1
ignore-scripts true`);
  const pkg = JSON.parse(pkgJson);
  // it is important not to include the `"scripts"` field as yarn still runs local scripts even with ignore-scripts
  const safePkg = {
    dependencies: pkg.dependencies,
    devDependencies: pkg.devDependencies,
    peerDependencies: pkg.peerDependencies,
    optionalDependencies: pkg.optionalDependencies,
  };
  await writeFile(workingDirectory + '/package.json', JSON.stringify(safePkg, null, '  '));
  try {
    await execute('node', [require.resolve('.bin/yarn')], {cwd: workingDirectory});
  } catch (ex) {
    let log;
    try {
      log = await readFile(workingDirectory + '/yarn-error.log', 'utf8');
    } catch (ex2) {
      throw ex;
    }
    throw 'Error running yarn ' + ex.message + '\n\n' + log;
  }
  const newYarnSource = await readFile(workingDirectory + '/yarn.lock', 'utf8');
  for (let i = 0; i < 3; i++) {
    const oldYarnSource = await readGitFile(userClient, {owner, repo, branch: defaultBranch, path: 'yarn.lock'});
    if (equalIsh(oldYarnSource, newYarnSource)) {
      return;
    }
    await delay(5000);
  }
  const pendingYarnSource = await readGitFile(userClient, {owner, repo, branch: 'yarn', path: 'yarn.lock'});
  if (!pendingYarnSource || !equalIsh(pendingYarnSource, newYarnSource)) {
    const commitOptions = {
      owner,
      repo,
      updates: [{path: 'yarn.lock', content: newYarnSource}],
      message: '[chore] Update yarn.lock',
    };

    if (pendingYarnSource) {
      if (exactlyOneAhead(userClient, {owner, repo, branch: 'yarn', baseBranch: defaultBranch})) {
        const commitSha = await createCommit(
          userClient,
          {
            ...commitOptions,
            branch: defaultBranch,
          },
        );
        await pushCommit(userClient, {owner, repo, branch: 'yarn', shaNewCommit: commitSha, force: true});
        console.log('replaced branch');
      } else {
        const commitSha = await createCommit(
          userClient,
          {
            ...commitOptions,
            branch: 'yarn',
          },
        );
        await pushCommit(userClient, {owner, repo, branch: 'yarn', shaNewCommit: commitSha});
        console.log('appended to branch');
      }
    } else {
      const commitSha = await createCommit(
        userClient,
        {
          ...commitOptions,
          branch: defaultBranch,
        },
      );
      await createBranch(userClient, {owner, repo, branch: 'yarn', commitSha});
      console.log('created new branch');
    }
  }
  // TODO: add detailed description for any pull request
  await createMergeRequest(
    repository,
    user,
    settings,
    {userClient, makeLatestClient},
    {
      sourceBranch: 'yarn',
      destinationBranch: defaultBranch,
      title: '[chore] Update yarn.lock',
      body: (
        'This automated pull request updates yarn.lock to all the latest versions. If you do not want to continue ' +
        'getting these pull requests, you can update your settings at https://makelatest.com'
      ),
    },
  );
}
