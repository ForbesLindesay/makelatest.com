import {readFile, writeFile} from 'then-fs';
import spawn from 'cross-spawn';

function execute(...args) {
  const child = spawn(...args);
  return new Promise((resolve, reject) => {
    let _stdout = [], _stderr = [];
    child.stdout.on('data', data => _stdout.push(data));
    child.stderr.on('data', data => _stderr.push(data));
    child.on('close', code => {
      const stdout = Buffer.concat(_stdout);
      const stderr = Buffer.concat(_stderr);
      if (code === 0) {
        resolve(stdout.toString('utf8'));
      } else {
        reject(new Error(stderr.toString('utf8')));
      }
    });
  });
}

const YARN_LOCK_FILE_NAME = 'yarn.lock';
// be a bit conservative
const ONE_MEGABYTE = 1000 * 1000;

async function readGitFile(client, owner, repo, fileName) {
  try {
    const fileObject = await client.get('/repos/:owner/:repo/contents/:path', {
      owner,
      repo,
      path: fileName,
    });
    if (
      fileObject.type !== 'file' ||
      fileObject.size >= ONE_MEGABYTE ||
      typeof fileObject.content !== 'string' ||
      typeof fileObject.encoding !== 'string'
    ) {
      throw new Error('Failed to fetch yarn.lock');
    }
    return new Buffer(fileObject.content, fileObject.encoding).toString();
  } catch (ex) {
    if (ex.statusCode !== 404) {
      throw new Error('Failed to fetch ' + fileName + ': ' + ex.message);
    }
    return null;
  }
}
export default async function run(repository, user, settings, {userClient, makeLatesetClient, workingDirectory}) {
  const {fullName, defaultBranch} = repository;
  const {accessToken, username} = user;
  const {enabled, onlyIfYarnLockPresent, createPullRequests, autoMerge} = settings;

  if (!enabled) {
    return;
  }

  const [owner, repo] = fullName.split('/');
  const pkgJson = await readGitFile(userClient, owner, repo, 'package.json');
  const oldYarnSource = await readGitFile(userClient, owner, repo, 'yarn.lock');
  if (!pkgJson) {
    return;
  }
  if (!oldYarnSource && onlyIfYarnLockPresent) {
    return;
  }
  // TODO: how should we generate this robustly?
  await writeFile(workingDirectory + '/.yarnrc', `# THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
# yarn lockfile v1
ignore-scripts true`);
  const pkg = JSON.parse(pkgJson);
  // it is important not to include the `"scripts"` field as yarn still runs local scripts even with ignore-scripts
  const safePkg = {
    dependencies: pkg.dependencies,
    devDependencies: pkg.devDependencies,
    peerDependencies: pkg.peerDependencies,
    optionalDependencies: pkg.optionalDependencies,
  };
  await writeFile(workingDirectory + '/package.json', JSON.stringify(safePkg, null, '  '));
  await execute('node', [require.resolve('.bin/yarn')], {cwd: workingDirectory});
  const newYarnSource = await readFile(workingDirectory + '/yarn.lock', 'utf8');
  if (oldYarnSource === newYarnSource) {
    return;
  }
  console.log(newYarnSource);
}
